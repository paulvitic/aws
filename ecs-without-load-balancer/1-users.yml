AWSTemplateFormatVersion: '2010-09-09'
Description: 'Environment admin user and the storage.'
Parameters:
  StackRootName:
    Type: String

Resources:
  EnvironmentAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join ['', [!Ref "StackRootName", "-admin" ]]
  EnvironmentAdminUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'EnvironmentAdminUser'
  StackAdminPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['', [!Ref "AWS::StackName", "-admin-policy" ]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cloudformation:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:cloudformation:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":stack/"
                  - !Ref "StackRootName"
                  - "*"
          - Effect: "Allow"
            Action:
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:PutLifecycleConfiguration"
              - "s3:PutBucketPolicy"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ecr:CreateRepository"
              - "ecr:GetAuthorizationToken"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ecr:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:ecr:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":repository/"
                  - !Ref "StackRootName"
                  - "*"
            # necessary to read EC2 image id
          - Effect: "Allow"
            Action:
              - "ssm:GetParameters"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ec2:Describe*"
              - "ec2:CreateVpc"
              - "ec2:DeleteVpc"
              - "ec2:ModifyVpcAttribute"
              - "ec2:CreateInternetGateway"
              - "ec2:DeleteInternetGateway"
              - "ec2:AttachInternetGateway"
              - "ec2:DetachInternetGateway"
              - "ec2:CreateSubnet"
              - "ec2:DeleteSubnet"
              - "ec2:CreateRouteTable"
              - "ec2:DeleteRouteTable"
              - "ec2:AssociateRouteTable"
              - "ec2:DisassociateRouteTable"
              - "ec2:ModifySubnetAttribute"
              - "ec2:CreateRoute"
              - "ec2:DeleteRoute"
              - "ec2:CreateSecurityGroup"
              - "ec2:DeleteSecurityGroup"
              - "ec2:AuthorizeSecurityGroupIngress"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ecs:CreateCluster"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ecs:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:ecs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":cluster/"
                  - !Ref "StackRootName"
                  - "-environment-Cluster*"
          - Effect: "Allow"
            Action:
              - "iam:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/"
                  - !Ref "StackRootName"
                  - "-environment-Cluster*"
          - Effect: "Allow"
            Action:
              - "iam:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":instance-profile/"
                  - !Ref "StackRootName"
                  - "-environment-Cluster*"
          - Effect: "Allow"
            Action:
              - "logs:DescribeLogGroups"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:logs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":log-group*"
          - Effect: "Allow"
            Action:
              - "logs:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:logs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":log-group:"
                  - !Ref "StackRootName"
                  - "-environment-Cluster*"
          - Effect: "Allow"
            Action:
              - "autoscaling:*"
            Resource:
              Fn::Join:
                - ''
                - - "arn:aws:autoscaling:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":launchConfiguration:*:launchConfigurationName/"
                  - !Ref "StackRootName"
                  - "-environment-Cluster*"
      Users:
        - Ref: "EnvironmentAdminUser"

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  EnvironmentAdminUserArn:
    Value: !GetAtt EnvironmentAdminUser.Arn
    Export:
      Name: !Sub '${StackRootName}-EnvironmentAdminUserArn'
  AccessKey:
    Value: !Ref 'EnvironmentAdminUserKey'
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [EnvironmentAdminUserKey, SecretAccessKey]
    Description: AWSSecretAccessKey of new user